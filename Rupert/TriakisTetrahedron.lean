import Rupert.Basic
import Rupert.Convex
import Rupert.Quaternion

namespace TriakisTetrahedron

open scoped Matrix

noncomputable def triakis_tetrahedron : Fin 8 → ℝ³ := ![
  ![ 3/5,  3/5,  3/5],
  ![ 3/5, -3/5, -3/5],
  ![-3/5,  3/5, -3/5],
  ![-3/5, -3/5,  3/5],
  ![-1,  1,  1],
  ![ 1, -1,  1],
  ![ 1,  1, -1],
  ![-1, -1, -1]]

def outer_quat : Quaternion ℝ :=
  ⟨0.85873211006535621336865915509406,-0.14891280730779837826460720862087,
   -0.35243651620172922189766495648655,-0.3408704167421980346652787829953⟩

noncomputable def outer_rot := matrix_of_quat outer_quat

lemma outer_rot_so3 : outer_rot ∈ SO3 := by
  have h : outer_quat.normSq ≠ 0 := by norm_num [outer_quat, Quaternion.normSq_def]
  exact matrix_of_quat_is_s03 h

def inner_quat : Quaternion ℝ :=
  ⟨0.14487392412524766061032721609081,0.36574765860116470461704807348724,
   -0.85469287951237071787602417316521,-0.33873334357156231755325848098437⟩

noncomputable def inner_rot := matrix_of_quat inner_quat

lemma inner_rot_so3 : inner_rot ∈ SO3 := by
  have h : inner_quat.normSq ≠ 0 := by norm_num [inner_quat, Quaternion.normSq_def]
  exact matrix_of_quat_is_s03 h

def inner_offset : ℝ² := ![0.00014271577460185376051010619491421, 0.00014897875075312654534996636979116]

set_option maxHeartbeats 10000000 in
theorem rupert : IsRupert triakis_tetrahedron := by
  use outer_rot, outer_rot_so3, inner_rot, inner_rot_so3, inner_offset
  intro outer_shadow inner_shadow
  let ε₀ : ℝ := 0.01
  have hε₀ : ε₀ ∈ Set.Ioo 0 1 := by norm_num
  have hb : Metric.ball 0 ε₀ ⊆ convexHull ℝ outer_shadow := by
    sorry
  intro v hv
  let ε₁ : ℝ := 1e-20
  have hε₁ : ε₁ ∈ Set.Ioo 0 1 := by norm_num
  refine mem_interior_hull hε₀.1 hε₁ hb ?_
  simp only [Set.mem_range, inner_shadow] at hv
  obtain ⟨y, hy⟩ := hv
  rw [mem_convexHull_iff_exists_fintype]
  fin_cases y <;>
    simp only [triakis_tetrahedron, Fin.reduceFinMk, Matrix.cons_val, inner_shadow] at hy <;>
    use Fin 8, inferInstance
  · sorry
/-
    use fun i ↦ (1 - ε₁) • (dropz (outer_rot *ᵥ (triakis_tetrahedron i)))
    refine ⟨?_, ?_, ?_, ?_⟩
    · intro i; fin_cases i <;> norm_num
    · norm_num [Fin.sum_univ_eight]; simp; norm_num
    · exact fun i ↦ ⟨dropz (outer_rot *ᵥ triakis_tetrahedron i), by simp [outer_shadow]⟩
    · simp [Fin.sum_univ_eight]
      rw [←hy]
      simp [triakis_tetrahedron, dropz, outer_rot, matrix_of_quat, outer_quat,
            inner_offset, inner_rot, inner_quat, ε₁, smul_smul, Matrix.smul_vec2]
      rw [Matrix.smul_vec2, Matrix.smul_vec2, Matrix.smul_vec2,
          Matrix.vec2_add, Matrix.vec2_add, Matrix.vec2_add]
      norm_num -/
  · sorry
  · sorry
  · sorry
  · sorry -- start here. this one's tough.
  · sorry
  · sorry
  · sorry

/-
computing the coefficients...
-/

namespace Coeff

def triakis_tetrahedron : Fin 8 → EuclideanSpace ℚ (Fin 3) := ![
  ![ 3/5,  3/5,  3/5],
  ![ 3/5, -3/5, -3/5],
  ![-3/5,  3/5, -3/5],
  ![-3/5, -3/5,  3/5],
  ![-1,  1,  1],
  ![ 1, -1,  1],
  ![ 1,  1, -1],
  ![-1, -1, -1]]

def outer_quat : Quaternion ℚ :=
  ⟨0.85873211006535621336865915509406,-0.14891280730779837826460720862087,
   -0.35243651620172922189766495648655,-0.3408704167421980346652787829953⟩
def outer_rot := matrix_of_quat outer_quat

def inner_quat : Quaternion ℚ :=
  ⟨0.14487392412524766061032721609081,0.36574765860116470461704807348724,
   -0.85469287951237071787602417316521,-0.33873334357156231755325848098437⟩
def inner_rot := matrix_of_quat inner_quat

def inner_offset : EuclideanSpace ℚ (Fin 2) := ![0.00014271577460185376051010619491421,0.00014897875075312654534996636979116]

def ε₁ : ℚ := 1e-20

open scoped Matrix

--#eval fun i ↦ (1 - ε₁) • (dropz (outer_rot *ᵥ (triakis_tetrahedron i)))

/-
p1 = vector(QQ, [2138824010631025813787418686055014842292951437968959607795120868564057907775642051/5050505050505050781031628450365924055129758923329706956843433500000000000000000000,
    11194232272582998887393704219614953725801063718861512069136175079975332619118988819/25252525252525253905158142251829620275648794616648534784217167500000000000000000000])
p2 = vector(QQ, [1007792486794289589661099686277409931140588847160201677988946324070313750967709837/5050505050505050781031628450365924055129758923329706956843433500000000000000000000,
    -25753872345462100658084924804027878877643196109442886587066950044067974399292422989/25252525252525253905158142251829620275648794616648534784217167500000000000000000000])
p3 = vector(QQ, [2045402453044912475243008470080859137996047232536556675376017875364567241813904347/5050505050505050781031628450365924055129758923329706956843433500000000000000000000,
    10722878928005532931793219023252004413470445705691874735093912828464858349705084957/25252525252525253905158142251829620275648794616648534784217167500000000000000000000])
p4 = vector(QQ, [-1038403790094045575738305368482656782285917503533143592232017013599787780111451247/1010101010101010156206325690073184811025951784665941391368686700000000000000000000,
    3836761144873568838898001561160920738371686684889499782836862135627783430468349213/25252525252525253905158142251829620275648794616648534784217167500000000000000000000])
p5 = vector(QQ, [-335930828931429863220366562092469977046862949053400559329648774690104583655903279/1010101010101010156206325690073184811025951784665941391368686700000000000000000000,
    8584624115154033552694974934675959625881065369814295529022316681355991466430807663/5050505050505050781031628450365924055129758923329706956843433500000000000000000000])
p6 = vector(QQ, [-681800817681637491747669490026953045998682410845518891792005958454855747271301449/1010101010101010156206325690073184811025951784665941391368686700000000000000000000,
    -3574292976001844310597739674417334804490148568563958245031304276154952783235028319/5050505050505050781031628450365924055129758923329706956843433500000000000000000000])
p7 = vector(QQ, [346134596698015191912768456160885594095305834511047864077339004533262593370483749/202020202020202031241265138014636962205190356933188278273737340000000000000000000,
    -1278920381624522946299333853720306912790562228296499927612287378542594476822783071/5050505050505050781031628450365924055129758923329706956843433500000000000000000000])
p8 = vector(QQ, [-712941336877008604595806228685004947430983812656319869265040289521352635925214017/1010101010101010156206325690073184811025951784665941391368686700000000000000000000,
    -3731410757527666295797901406538317908600354572953837356378725026658444206372996273/5050505050505050781031628450365924055129758923329706956843433500000000000000000000])


p1 = vector(QQ, [196058867641177370223569656965377115186633586432471/462962962962962962541488809841500000000000000000000,
    205227591664021660212921621316482005620072483249891/462962962962962962541488809841500000000000000000000])
p2 = vector(QQ, [13197282565163317281551797367137255716072051186961/66137566137566137505926972834500000000000000000000,
    -67450618047638830902121084842401389468749821867549/66137566137566137505926972834500000000000000000000])
p3 = vector(QQ, [62498408287483424340049069562780721312148815019099/154320987654320987513829603280500000000000000000000,
    13105740912006760756074874507357710170215718458613/30864197530864197502765920656100000000000000000000])
p4 = vector(QQ, [95187014091954172842915889444736013827116877959699/92592592592592592508297761968300000000000000000000,
    70340620989348744760802854969962068107940492943757/462962962962962962541488809841500000000000000000000])
p5 = vector(QQ, [-13197282565163317281551797367137255716072051186961/39682539682539682503556183700700000000000000000000,
    67450618047638830902121084842401389468749821867549/39682539682539682503556183700700000000000000000000])
p6 = vector(QQ, [-62498408287483424340049069562780721312148815019099/92592592592592592508297761968300000000000000000000,
    -13105740912006760756074874507357710170215718458613/18518518518518518501659552393660000000000000000000])
p7 = vector(QQ, [95187014091954172842915889444736013827116877959699/55555555555555555504978657180980000000000000000000,
    -70340620989348744760802854969962068107940492943757/277777777777777777524893285904900000000000000000000])
p8 = vector(QQ, [196058867641177370223569656965377115186633586432471/277777777777777777524893285904900000000000000000000,
    -205227591664021660212921621316482005620072483249891/277777777777777777524893285904900000000000000000000])


p1 = vector(QQ, [19605886762157148346141250861923586432471/46296296296296296254148880984150000000000,
                 20522759164349890104857173121162483249891/46296296296296296254148880984150000000000])
p2 = vector(QQ, [1319728256384358902516743846462051186961/6613756613756613750592697283450000000000,
                 -6745061804089376909803170793259821867549/6613756613756613750592697283450000000000])
p3 = vector(QQ, [6249840828123358351192571121158815019099/15432098765432098751382960328050000000000,
                 1310574091069618666500525584085718458613/3086419753086419750276592065610000000000])
p4 = vector(QQ, [-9518701408243547143467234230126877959699/9259259259259259250829776196830000000000,
                 7034062098231468266257138670370492943757/46296296296296296254148880984150000000000])
p5 = vector(QQ, [-1319728256384358902516743846462051186961/3968253968253968250355618370070000000000,
                  6745061804089376909803170793259821867549/3968253968253968250355618370070000000000])
p6 = vector(QQ, [-6249840828123358351192571121158815019099/9259259259259259250829776196830000000000,
                -1310574091069618666500525584085718458613/1851851851851851850165955239366000000000])
p7 = vector(QQ, [9518701408243547143467234230126877959699/5555555555555555550497865718098000000000,
                -7034062098231468266257138670370492943757/27777777777777777752489328590490000000000])
p8 = vector(QQ, [-19605886762157148346141250861923586432471/27777777777777777752489328590490000000000,
                 -20522759164349890104857173121162483249891/27777777777777777752489328590490000000000])
-/


def hack_add (v1 v2 : EuclideanSpace ℚ (Fin 2)) : EuclideanSpace ℚ (Fin 2) :=
  ![v1 0 + v2 0, v1 1 + v2 1]

--#eval fun i ↦ hack_add inner_offset (dropz (inner_rot *ᵥ (triakis_tetrahedron i)))

/-
![![(-1027635835190299340240272826197402376927991002716872004737735034958684953682422540661616133937102113 : Rat)/1000000000000000073735861513776400550661946829491234957546747914700000000000000000000000000000000000,
    (37938795354720450579283473352634782239460475383362853284564274465076833006755688918994641451123513 : Rat)/250000000000000018433965378444100137665486707372808739386686978675000000000000000000000000000000000],

  ![(199344795532340109886162312455006301663650976768638886659617220081315046317577459338383866062897887 : Rat)/1000000000000000073735861513776400550661946829491234957546747914700000000000000000000000000000000000,
    (-254869634911352845990402080232631701388778040316956363725616733224923166993244311081005358548876487 : Rat)/250000000000000018433965378444100137665486707372808739386686978675000000000000000000000000000000000],

  ![(395453368844801452741324841755533486733653178929560286770485387161315046317577459338383866062897887 : Rat)/1000000000000000073735861513776400550661946829491234957546747914700000000000000000000000000000000000,
    (113028717329013609794485076607733204267862447332979647886505908545076833006755688918994641451123513 : Rat)/250000000000000018433965378444100137665486707372808739386686978675000000000000000000000000000000000],

  ![(433408533911565192696919179134013893346848783699925915379067279481315046317577459338383866062897887 : Rat)/1000000000000000073735861513776400550661946829491234957546747914700000000000000000000000000000000000,
    (104051100978371912172968573176082825465266008338494093926990704815076833006755688918994641451123513 : Rat)/250000000000000018433965378444100137665486707372808739386686978675000000000000000000000000000000000],

q = vector(QQ, [-331860750488295239754181515993576299561977003493562755051738798958684953682422540661616133937102113/1000000000000000073735861513776400550661946829491234957546747914700000000000000000000000000000000000,
    424882044019423494354893495656932242703837327686847427124323991775076833006755688918994641451123513/250000000000000018433965378444100137665486707372808739386686978675000000000000000000000000000000000])

  ![(-658708372675730811179452398161121608011980673761765088569852410758684953682422540661616133937102113 : Rat)/1000000000000000073735861513776400550661946829491234957546747914700000000000000000000000000000000000,
    (-188281876381187265286585099077009266723896818396379258895880411174923166993244311081005358548876487 : Rat)/250000000000000018433965378444100137665486707372808739386686978675000000000000000000000000000000000],

  ![(-721966981120337044438776293791922285700640015045707802917488897958684953682422540661616133937102113 : Rat)/1000000000000000073735861513776400550661946829491234957546747914700000000000000000000000000000000000,
    (-173319182463451102584057593357591968719569420072236668963355071624923166993244311081005358548876487 : Rat)/250000000000000018433965378444100137665486707372808739386686978675000000000000000000000000000000000],

  ![(1713106967382770510456543715093771498090759628982288730610514959441315046317577459338383866062897887 : Rat)/1000000000000000073735861513776400550661946829491234957546747914700000000000000000000000000000000000,
    (-63132006424031999927915760318511896676560198480351267892644354374923166993244311081005358548876487 : Rat)/250000000000000018433965378444100137665486707372808739386686978675000000000000000000000000000000000]]
-/
