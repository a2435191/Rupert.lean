import Rupert.Basic
import Rupert.Convex
import Rupert.Quaternion

namespace TriakisTetrahedron

open scoped Matrix

noncomputable def triakis_tetrahedron : Fin 8 → ℝ³ := ![
  ![ 5/3,  5/3,  5/3],
  ![ 5/3, -5/3, -5/3],
  ![-5/3,  5/3, -5/3],
  ![-5/3, -5/3,  5/3],
  ![-1,  1,  1],
  ![ 1, -1,  1],
  ![ 1,  1, -1],
  ![-1, -1, -1]]

def outer_quat : Quaternion ℝ :=
  ⟨0.85873211006535621336865915509406,-0.14891280730779837826460720862087,
   -0.35243651620172922189766495648655,-0.3408704167421980346652787829953⟩

noncomputable def outer_rot := matrix_of_quat outer_quat

lemma outer_rot_so3 : outer_rot ∈ SO3 := by
  have h : outer_quat.normSq ≠ 0 := by norm_num [outer_quat, Quaternion.normSq_def]
  exact matrix_of_quat_is_s03 h

def inner_quat : Quaternion ℝ :=
  ⟨0.14487392412524766061032721609081,0.36574765860116470461704807348724,
   -0.85469287951237071787602417316521,-0.33873334357156231755325848098437⟩

noncomputable def inner_rot := matrix_of_quat inner_quat

lemma inner_rot_so3 : inner_rot ∈ SO3 := by
  have h : inner_quat.normSq ≠ 0 := by norm_num [inner_quat, Quaternion.normSq_def]
  exact matrix_of_quat_is_s03 h

def inner_offset : ℝ² := ![0.00014271577460185376051010619491421, 0.00014897875075312654534996636979116]

set_option maxHeartbeats 10000000 in
theorem rupert : IsRupert triakis_tetrahedron := by
  use outer_rot, outer_rot_so3, inner_rot, inner_rot_so3, inner_offset
  intro outer_shadow inner_shadow
  let ε₀ : ℝ := 0.01
  have hε₀ : ε₀ ∈ Set.Ioo 0 1 := by norm_num
  have hb : Metric.ball 0 ε₀ ⊆ convexHull ℝ outer_shadow := by
    sorry
  intro v hv
  let ε₁ : ℝ := 1e-12
  have hε₁ : ε₁ ∈ Set.Ioo 0 1 := by norm_num
  refine mem_interior_hull hε₀.1 hε₁ hb ?_
  simp only [Set.mem_range, inner_shadow] at hv
  obtain ⟨y, hy⟩ := hv
  rw [mem_convexHull_iff_exists_fintype]
  fin_cases y <;>
    simp only [triakis_tetrahedron, Fin.reduceFinMk, Matrix.cons_val, inner_shadow] at hy <;>
    use Fin 8, inferInstance
  · sorry
/-
    use fun i ↦ (1 - ε₁) • (dropz (outer_rot *ᵥ (triakis_tetrahedron i)))
    refine ⟨?_, ?_, ?_, ?_⟩
    · intro i; fin_cases i <;> norm_num
    · norm_num [Fin.sum_univ_eight]; simp; norm_num
    · exact fun i ↦ ⟨dropz (outer_rot *ᵥ triakis_tetrahedron i), by simp [outer_shadow]⟩
    · simp [Fin.sum_univ_eight]
      rw [←hy]
      simp [triakis_tetrahedron, dropz, outer_rot, matrix_of_quat, outer_quat,
            inner_offset, inner_rot, inner_quat, ε₁, smul_smul, Matrix.smul_vec2]
      rw [Matrix.smul_vec2, Matrix.smul_vec2, Matrix.smul_vec2,
          Matrix.vec2_add, Matrix.vec2_add, Matrix.vec2_add]
      norm_num -/
  · sorry
  · sorry
  · sorry
  · use ![287451698076343437529618749409826496223730331173603466764016873063265947750808573612596931504582915536420806943585057646228711026801569632350248510258698207999/
          767270909564032635409533409194101564508595688174107251387536883255953985359776674397807198983485003699172035203913371876973473347845943735000000000000000000000000,
          0,
          354510528347196502738126519555246926711238220891891559888818909890363919324805883140208150122389735366212093834622514812366964668017512295394937682648984381/
          3552180136870521460229321338861581317169424482287533571238596681740527709998966085175033328627245387496166829647747092023025339573360850625000000000000000000000,
          0,
          153381376718366659505482471023293560935240466077444199868767376299670880161090341550687263418310796920159302516940301671225554674490170076542368888990057824233141/
          153454181912806527081906681838820312901719137634821450277507376651190797071955334879561439796697000739834407040782674375394694669569188747000000000000000000000000,
          0, 0, 0]
    use fun i ↦ (1 - ε₁) • (dropz (outer_rot *ᵥ (triakis_tetrahedron i)))
    refine ⟨?_, ?_, ?_, ?_⟩
    · intro i; fin_cases i <;> norm_num
    · norm_num [Fin.sum_univ_eight]; simp; norm_num
    · exact fun i ↦ ⟨dropz (outer_rot *ᵥ triakis_tetrahedron i), by simp [outer_shadow]⟩
    · simp [Fin.sum_univ_eight]
      rw [←hy]
      simp [triakis_tetrahedron, dropz, outer_rot, matrix_of_quat, outer_quat,
            inner_offset, inner_rot, inner_quat, ε₁, smul_smul, Matrix.smul_vec2]
      rw [Matrix.smul_vec2, Matrix.smul_vec2, Matrix.smul_vec2,
          Matrix.vec2_add, Matrix.vec2_add, Matrix.vec2_add]
      norm_num
  · sorry
  · sorry
  · sorry

/-
computing the coefficients...
-/

namespace Coeff

def triakis_tetrahedron : Fin 8 → EuclideanSpace ℚ (Fin 3) := ![
  ![ 5/3,  5/3,  5/3],
  ![ 5/3, -5/3, -5/3],
  ![-5/3,  5/3, -5/3],
  ![-5/3, -5/3,  5/3],
  ![-1,  1,  1],
  ![ 1, -1,  1],
  ![ 1,  1, -1],
  ![-1, -1, -1]]

def outer_quat : Quaternion ℚ :=
  ⟨0.85873211006535621336865915509406,-0.14891280730779837826460720862087,
   -0.35243651620172922189766495648655,-0.3408704167421980346652787829953⟩
def outer_rot := matrix_of_quat outer_quat

def inner_quat : Quaternion ℚ :=
  ⟨0.14487392412524766061032721609081,0.36574765860116470461704807348724,
   -0.85469287951237071787602417316521,-0.33873334357156231755325848098437⟩
def inner_rot := matrix_of_quat inner_quat

def inner_offset : EuclideanSpace ℚ (Fin 2) := ![0.00014271577460185376051010619491421,0.00014897875075312654534996636979116]

def ε₁ : ℚ := 1e-12

open scoped Matrix

--#eval fun i ↦ (1 - ε₁) • (dropz (outer_rot *ᵥ (triakis_tetrahedron i)))

/-
p1 = vector(QQ, [2376471122920985544220195444830573659449864646811268688102445211975071339/2020202020202020312412651380146369622051903569331882782737373400000000000,
    12438035858413116283592292826059197853481977111744715317887390402124332091/10101010101010101562063256900731848110259517846659413913686867000000000000])
p2 = vector(QQ, [1119769429770313107982648135061868499362394744938464339595608527885301093/2020202020202020312412651380146369622051903569331882782737373400000000000,
    -28615413717151496428885557140915730467443486938703872183516109488810269221/10101010101010101562063256900731848110259517846659413913686867000000000000])
p3 = vector(QQ, [2272669392269852303122686202373383111393411721355467862384468915757100483/2020202020202020312412651380146369622051903569331882782737373400000000000,
                11914309919994233392191602532889065883307686804527117647042211261078342773/10101010101010101562063256900731848110259517846659413913686867000000000000])
p4 = vector(QQ, [-1153781988992230191065105956453165054041134222621040178016504531123494583/404040404040404062482530276029273924410380713866376556547474680000000000,
                 4263067938744146753101661781967466730653823022432039218586507825607594357/10101010101010101562063256900731848110259517846659413913686867000000000000])
p5 = vector(QQ, [-3359308289310939323947944405185605498087184234815393018786825583655903279/10101010101010101562063256900731848110259517846659413913686867000000000000,
    85846241151454489286656671422747191402330460816111616550548328466430807663/50505050505050507810316284503659240551297589233297069568434335000000000000])
p6 = vector(QQ, [-6818008176809556909368058607120149334180235164066403587153406747271301449/10101010101010101562063256900731848110259517846659413913686867000000000000,
                 -35742929759982700176574807598667197649923060413581352941126633783235028319/50505050505050507810316284503659240551297589233297069568434335000000000000])
p7 = vector(QQ, [3461345966976690573195317869359495162123402667863120534049513593370483749/2020202020202020312412651380146369622051903569331882782737373400000000000,
    -12789203816232440259304985345902400191961469067296117655759523476822783071/50505050505050507810316284503659240551297589233297069568434335000000000000])
p8 = vector(QQ, [-7129413368762956632660586334491720978349593940433806064307335635925214017/10101010101010101562063256900731848110259517846659413913686867000000000000,
    -37314107575239348850776878478177593560445931335234145953662171206372996273/50505050505050507810316284503659240551297589233297069568434335000000000000])


p1 = vector(QQ, [19605886762157148346141250861923586432471/46296296296296296254148880984150000000000,
                 20522759164349890104857173121162483249891/46296296296296296254148880984150000000000])
p2 = vector(QQ, [1319728256384358902516743846462051186961/6613756613756613750592697283450000000000,
                 -6745061804089376909803170793259821867549/6613756613756613750592697283450000000000])
p3 = vector(QQ, [6249840828123358351192571121158815019099/15432098765432098751382960328050000000000,
                 1310574091069618666500525584085718458613/3086419753086419750276592065610000000000])
p4 = vector(QQ, [-9518701408243547143467234230126877959699/9259259259259259250829776196830000000000,
                 7034062098231468266257138670370492943757/46296296296296296254148880984150000000000])
p5 = vector(QQ, [-1319728256384358902516743846462051186961/3968253968253968250355618370070000000000,
                  6745061804089376909803170793259821867549/3968253968253968250355618370070000000000])
p6 = vector(QQ, [-6249840828123358351192571121158815019099/9259259259259259250829776196830000000000,
                -1310574091069618666500525584085718458613/1851851851851851850165955239366000000000])
p7 = vector(QQ, [9518701408243547143467234230126877959699/5555555555555555550497865718098000000000,
                -7034062098231468266257138670370492943757/27777777777777777752489328590490000000000])
p8 = vector(QQ, [-19605886762157148346141250861923586432471/27777777777777777752489328590490000000000,
                 -20522759164349890104857173121162483249891/27777777777777777752489328590490000000000])
-/


def hack_add (v1 v2 : EuclideanSpace ℚ (Fin 2)) : EuclideanSpace ℚ (Fin 2) :=
  ![v1 0 + v2 0, v1 1 + v2 1]

--#eval fun i ↦ hack_add inner_offset (dropz (inner_rot *ᵥ (triakis_tetrahedron i)))

/-

![![(-8564393110717037722114451561174554880821474271548937484909705093676054861047267621984848401811306339 : Rat)/3000000000000000221207584541329201651985840488473704872640243744100000000000000000000000000000000000,
    (315957989621666252752248887400197704550422773877516802208110081075230499020267066756983924353370539 : Rat)/750000000000000055301896135332300412996460122118426218160060936025000000000000000000000000000000000],

  ![(1660445478638291028939174594262184107442208890830319943401563698323945138952732378015151598188693661 : Rat)/3000000000000000221207584541329201651985840488473704872640243744100000000000000000000000000000000000,
    (-2124112262595611218661797392477022992351564856958476672876731649674769500979732933243016075646629461 : Rat)/750000000000000055301896135332300412996460122118426218160060936025000000000000000000000000000000000],

  ![(3294683589575468886065529005099910649692227242171331610992131757323945138952732378015151598188693661 : Rat)/3000000000000000221207584541329201651985840488473704872640243744100000000000000000000000000000000000,
    (941707339407442579545595581192684554787105873457656757224290365075230499020267066756983924353370539 : Rat)/750000000000000055301896135332300412996460122118426218160060936025000000000000000000000000000000000],

  ![(3610976631798500052362148483253914038135523948591045182730314193323945138952732378015151598188693661 : Rat)/3000000000000000221207584541329201651985840488473704872640243744100000000000000000000000000000000000,
    (866893869818761766032958052595598064765468881836943807561663667325230499020267066756983924353370539 : Rat)/750000000000000055301896135332300412996460122118426218160060936025000000000000000000000000000000000],

q = vector(QQ, [-331860750488295239754181515993576299561977003493562755051738798958684953682422540661616133937102113/1000000000000000073735861513776400550661946829491234957546747914700000000000000000000000000000000000,
    424882044019423494354893495656932242703837327686847427124323991775076833006755688918994641451123513/250000000000000018433965378444100137665486707372808739386686978675000000000000000000000000000000000])

  ![(-658708372675730811179452398161121608011980673761765088569852410758684953682422540661616133937102113 : Rat)/1000000000000000073735861513776400550661946829491234957546747914700000000000000000000000000000000000,
    (-188281876381187265286585099077009266723896818396379258895880411174923166993244311081005358548876487 : Rat)/250000000000000018433965378444100137665486707372808739386686978675000000000000000000000000000000000],

  ![(-721966981120337044438776293791922285700640015045707802917488897958684953682422540661616133937102113 : Rat)/1000000000000000073735861513776400550661946829491234957546747914700000000000000000000000000000000000,
    (-173319182463451102584057593357591968719569420072236668963355071624923166993244311081005358548876487 : Rat)/250000000000000018433965378444100137665486707372808739386686978675000000000000000000000000000000000],

  ![(1713106967382770510456543715093771498090759628982288730610514959441315046317577459338383866062897887 : Rat)/1000000000000000073735861513776400550661946829491234957546747914700000000000000000000000000000000000,
    (-63132006424031999927915760318511896676560198480351267892644354374923166993244311081005358548876487 : Rat)/250000000000000018433965378444100137665486707372808739386686978675000000000000000000000000000000000]]
-/
